
LL_DMA_SPI_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015ec  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001784  08001784  00011784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800179c  0800179c  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  0800179c  0800179c  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800179c  0800179c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800179c  0800179c  0001179c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017a0  080017a0  000117a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080017a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000084  08001828  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08001828  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005220  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000111e  00000000  00000000  000252d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000548  00000000  00000000  000263f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004b0  00000000  00000000  00026940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fe6a  00000000  00000000  00026df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000043e9  00000000  00000000  00036c5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005d730  00000000  00000000  0003b043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00098773  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014a4  00000000  00000000  000987c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000084 	.word	0x20000084
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800176c 	.word	0x0800176c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000088 	.word	0x20000088
 80001d4:	0800176c 	.word	0x0800176c

080001d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001dc:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <__NVIC_GetPriorityGrouping+0x18>)
 80001de:	68db      	ldr	r3, [r3, #12]
 80001e0:	0a1b      	lsrs	r3, r3, #8
 80001e2:	f003 0307 	and.w	r3, r3, #7
}
 80001e6:	4618      	mov	r0, r3
 80001e8:	46bd      	mov	sp, r7
 80001ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ee:	4770      	bx	lr
 80001f0:	e000ed00 	.word	0xe000ed00

080001f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	4603      	mov	r3, r0
 80001fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000202:	2b00      	cmp	r3, #0
 8000204:	db0b      	blt.n	800021e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000206:	79fb      	ldrb	r3, [r7, #7]
 8000208:	f003 021f 	and.w	r2, r3, #31
 800020c:	4907      	ldr	r1, [pc, #28]	; (800022c <__NVIC_EnableIRQ+0x38>)
 800020e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000212:	095b      	lsrs	r3, r3, #5
 8000214:	2001      	movs	r0, #1
 8000216:	fa00 f202 	lsl.w	r2, r0, r2
 800021a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	e000e100 	.word	0xe000e100

08000230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	4603      	mov	r3, r0
 8000238:	6039      	str	r1, [r7, #0]
 800023a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800023c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000240:	2b00      	cmp	r3, #0
 8000242:	db0a      	blt.n	800025a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	b2da      	uxtb	r2, r3
 8000248:	490c      	ldr	r1, [pc, #48]	; (800027c <__NVIC_SetPriority+0x4c>)
 800024a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024e:	0112      	lsls	r2, r2, #4
 8000250:	b2d2      	uxtb	r2, r2
 8000252:	440b      	add	r3, r1
 8000254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000258:	e00a      	b.n	8000270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	b2da      	uxtb	r2, r3
 800025e:	4908      	ldr	r1, [pc, #32]	; (8000280 <__NVIC_SetPriority+0x50>)
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	f003 030f 	and.w	r3, r3, #15
 8000266:	3b04      	subs	r3, #4
 8000268:	0112      	lsls	r2, r2, #4
 800026a:	b2d2      	uxtb	r2, r2
 800026c:	440b      	add	r3, r1
 800026e:	761a      	strb	r2, [r3, #24]
}
 8000270:	bf00      	nop
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr
 800027c:	e000e100 	.word	0xe000e100
 8000280:	e000ed00 	.word	0xe000ed00

08000284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000284:	b480      	push	{r7}
 8000286:	b089      	sub	sp, #36	; 0x24
 8000288:	af00      	add	r7, sp, #0
 800028a:	60f8      	str	r0, [r7, #12]
 800028c:	60b9      	str	r1, [r7, #8]
 800028e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	f003 0307 	and.w	r3, r3, #7
 8000296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000298:	69fb      	ldr	r3, [r7, #28]
 800029a:	f1c3 0307 	rsb	r3, r3, #7
 800029e:	2b04      	cmp	r3, #4
 80002a0:	bf28      	it	cs
 80002a2:	2304      	movcs	r3, #4
 80002a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002a6:	69fb      	ldr	r3, [r7, #28]
 80002a8:	3304      	adds	r3, #4
 80002aa:	2b06      	cmp	r3, #6
 80002ac:	d902      	bls.n	80002b4 <NVIC_EncodePriority+0x30>
 80002ae:	69fb      	ldr	r3, [r7, #28]
 80002b0:	3b03      	subs	r3, #3
 80002b2:	e000      	b.n	80002b6 <NVIC_EncodePriority+0x32>
 80002b4:	2300      	movs	r3, #0
 80002b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002b8:	f04f 32ff 	mov.w	r2, #4294967295
 80002bc:	69bb      	ldr	r3, [r7, #24]
 80002be:	fa02 f303 	lsl.w	r3, r2, r3
 80002c2:	43da      	mvns	r2, r3
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	401a      	ands	r2, r3
 80002c8:	697b      	ldr	r3, [r7, #20]
 80002ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002cc:	f04f 31ff 	mov.w	r1, #4294967295
 80002d0:	697b      	ldr	r3, [r7, #20]
 80002d2:	fa01 f303 	lsl.w	r3, r1, r3
 80002d6:	43d9      	mvns	r1, r3
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002dc:	4313      	orrs	r3, r2
         );
}
 80002de:	4618      	mov	r0, r3
 80002e0:	3724      	adds	r7, #36	; 0x24
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
	...

080002ec <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80002f6:	4a0c      	ldr	r2, [pc, #48]	; (8000328 <LL_DMA_EnableStream+0x3c>)
 80002f8:	683b      	ldr	r3, [r7, #0]
 80002fa:	4413      	add	r3, r2
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	461a      	mov	r2, r3
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	4413      	add	r3, r2
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4908      	ldr	r1, [pc, #32]	; (8000328 <LL_DMA_EnableStream+0x3c>)
 8000308:	683a      	ldr	r2, [r7, #0]
 800030a:	440a      	add	r2, r1
 800030c:	7812      	ldrb	r2, [r2, #0]
 800030e:	4611      	mov	r1, r2
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	440a      	add	r2, r1
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	6013      	str	r3, [r2, #0]
}
 800031a:	bf00      	nop
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	08001784 	.word	0x08001784

0800032c <LL_DMA_GetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR));
 8000336:	4a08      	ldr	r2, [pc, #32]	; (8000358 <LL_DMA_GetDataTransferDirection+0x2c>)
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	4413      	add	r3, r2
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	461a      	mov	r2, r3
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	4413      	add	r3, r2
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
}
 800034a:	4618      	mov	r0, r3
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	08001784 	.word	0x08001784

0800035c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
 8000362:	60f8      	str	r0, [r7, #12]
 8000364:	60b9      	str	r1, [r7, #8]
 8000366:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8000368:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <LL_DMA_SetDataLength+0x44>)
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	4413      	add	r3, r2
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	461a      	mov	r2, r3
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	4413      	add	r3, r2
 8000376:	685b      	ldr	r3, [r3, #4]
 8000378:	0c1b      	lsrs	r3, r3, #16
 800037a:	041b      	lsls	r3, r3, #16
 800037c:	4908      	ldr	r1, [pc, #32]	; (80003a0 <LL_DMA_SetDataLength+0x44>)
 800037e:	68ba      	ldr	r2, [r7, #8]
 8000380:	440a      	add	r2, r1
 8000382:	7812      	ldrb	r2, [r2, #0]
 8000384:	4611      	mov	r1, r2
 8000386:	68fa      	ldr	r2, [r7, #12]
 8000388:	440a      	add	r2, r1
 800038a:	4611      	mov	r1, r2
 800038c:	687a      	ldr	r2, [r7, #4]
 800038e:	4313      	orrs	r3, r2
 8000390:	604b      	str	r3, [r1, #4]
}
 8000392:	bf00      	nop
 8000394:	3714      	adds	r7, #20
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	08001784 	.word	0x08001784

080003a4 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t SrcAddress, uint32_t DstAddress, uint32_t Direction)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b085      	sub	sp, #20
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	60f8      	str	r0, [r7, #12]
 80003ac:	60b9      	str	r1, [r7, #8]
 80003ae:	607a      	str	r2, [r7, #4]
 80003b0:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80003b2:	69bb      	ldr	r3, [r7, #24]
 80003b4:	2b40      	cmp	r3, #64	; 0x40
 80003b6:	d114      	bne.n	80003e2 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, SrcAddress);
 80003b8:	4a17      	ldr	r2, [pc, #92]	; (8000418 <LL_DMA_ConfigAddresses+0x74>)
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	4413      	add	r3, r2
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	461a      	mov	r2, r3
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	4413      	add	r3, r2
 80003c6:	461a      	mov	r2, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, DstAddress);
 80003cc:	4a12      	ldr	r2, [pc, #72]	; (8000418 <LL_DMA_ConfigAddresses+0x74>)
 80003ce:	68bb      	ldr	r3, [r7, #8]
 80003d0:	4413      	add	r3, r2
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	461a      	mov	r2, r3
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	4413      	add	r3, r2
 80003da:	461a      	mov	r2, r3
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
  }
}
 80003e0:	e013      	b.n	800040a <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
 80003e2:	4a0d      	ldr	r2, [pc, #52]	; (8000418 <LL_DMA_ConfigAddresses+0x74>)
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	4413      	add	r3, r2
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	461a      	mov	r2, r3
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	4413      	add	r3, r2
 80003f0:	461a      	mov	r2, r3
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
 80003f6:	4a08      	ldr	r2, [pc, #32]	; (8000418 <LL_DMA_ConfigAddresses+0x74>)
 80003f8:	68bb      	ldr	r3, [r7, #8]
 80003fa:	4413      	add	r3, r2
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	461a      	mov	r2, r3
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	4413      	add	r3, r2
 8000404:	461a      	mov	r2, r3
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	60d3      	str	r3, [r2, #12]
}
 800040a:	bf00      	nop
 800040c:	3714      	adds	r7, #20
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	08001784 	.word	0x08001784

0800041c <LL_DMA_ClearFlag_TC4>:
  * @rmtoll HIFCR  CTCIF4    LL_DMA_ClearFlag_TC4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
{
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF4);
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	2220      	movs	r2, #32
 8000428:	60da      	str	r2, [r3, #12]
}
 800042a:	bf00      	nop
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr

08000436 <LL_DMA_ClearFlag_TE4>:
  * @rmtoll HIFCR  CTEIF4    LL_DMA_ClearFlag_TE4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE4(DMA_TypeDef *DMAx)
{
 8000436:	b480      	push	{r7}
 8000438:	b083      	sub	sp, #12
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF4);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	2208      	movs	r2, #8
 8000442:	60da      	str	r2, [r3, #12]
}
 8000444:	bf00      	nop
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr

08000450 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TEIE);
 800045a:	4a0c      	ldr	r2, [pc, #48]	; (800048c <LL_DMA_EnableIT_TE+0x3c>)
 800045c:	683b      	ldr	r3, [r7, #0]
 800045e:	4413      	add	r3, r2
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	461a      	mov	r2, r3
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4413      	add	r3, r2
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4908      	ldr	r1, [pc, #32]	; (800048c <LL_DMA_EnableIT_TE+0x3c>)
 800046c:	683a      	ldr	r2, [r7, #0]
 800046e:	440a      	add	r2, r1
 8000470:	7812      	ldrb	r2, [r2, #0]
 8000472:	4611      	mov	r1, r2
 8000474:	687a      	ldr	r2, [r7, #4]
 8000476:	440a      	add	r2, r1
 8000478:	f043 0304 	orr.w	r3, r3, #4
 800047c:	6013      	str	r3, [r2, #0]
}
 800047e:	bf00      	nop
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	08001784 	.word	0x08001784

08000490 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 800049a:	4a0c      	ldr	r2, [pc, #48]	; (80004cc <LL_DMA_EnableIT_TC+0x3c>)
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	4413      	add	r3, r2
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	461a      	mov	r2, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4413      	add	r3, r2
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4908      	ldr	r1, [pc, #32]	; (80004cc <LL_DMA_EnableIT_TC+0x3c>)
 80004ac:	683a      	ldr	r2, [r7, #0]
 80004ae:	440a      	add	r2, r1
 80004b0:	7812      	ldrb	r2, [r2, #0]
 80004b2:	4611      	mov	r1, r2
 80004b4:	687a      	ldr	r2, [r7, #4]
 80004b6:	440a      	add	r2, r1
 80004b8:	f043 0310 	orr.w	r3, r3, #16
 80004bc:	6013      	str	r3, [r2, #0]
}
 80004be:	bf00      	nop
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	08001784 	.word	0x08001784

080004d0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80004d8:	4b08      	ldr	r3, [pc, #32]	; (80004fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80004da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004dc:	4907      	ldr	r1, [pc, #28]	; (80004fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4313      	orrs	r3, r2
 80004e2:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80004e4:	4b05      	ldr	r3, [pc, #20]	; (80004fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80004e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4013      	ands	r3, r2
 80004ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ee:	68fb      	ldr	r3, [r7, #12]
}
 80004f0:	bf00      	nop
 80004f2:	3714      	adds	r7, #20
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	40023800 	.word	0x40023800

08000500 <LL_SPI_EnableDMAReq_TX>:
  * @rmtoll CR2          TXDMAEN       LL_SPI_EnableDMAReq_TX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_TX(SPI_TypeDef *SPIx)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	f043 0202 	orr.w	r2, r3, #2
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	605a      	str	r2, [r3, #4]
}
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr

08000520 <LL_SPI_DMA_GetRegAddr>:
  * @rmtoll DR           DR            LL_SPI_DMA_GetRegAddr
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  return (uint32_t) &(SPIx->DR);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	330c      	adds	r3, #12
}
 800052c:	4618      	mov	r0, r3
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	041a      	lsls	r2, r3, #16
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	619a      	str	r2, [r3, #24]
}
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
	...

08000558 <dma_init>:
/* Configure DMA                                                              */
/*----------------------------------------------------------------------------*/

/* USER CODE BEGIN 1 */
void dma_init(void)
{
 8000558:	b5b0      	push	{r4, r5, r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af02      	add	r7, sp, #8
	   LL_DMA_ClearFlag_TC4(DMA1);
 800055e:	4819      	ldr	r0, [pc, #100]	; (80005c4 <dma_init+0x6c>)
 8000560:	f7ff ff5c 	bl	800041c <LL_DMA_ClearFlag_TC4>
	    LL_DMA_ClearFlag_TE4(DMA1);
 8000564:	4817      	ldr	r0, [pc, #92]	; (80005c4 <dma_init+0x6c>)
 8000566:	f7ff ff66 	bl	8000436 <LL_DMA_ClearFlag_TE4>
	LL_DMA_ConfigAddresses(DMA1, LL_DMA_STREAM_4, (uint32_t)mainBuff, LL_SPI_DMA_GetRegAddr(SPI2), LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_STREAM_4));
 800056a:	4d17      	ldr	r5, [pc, #92]	; (80005c8 <dma_init+0x70>)
 800056c:	4817      	ldr	r0, [pc, #92]	; (80005cc <dma_init+0x74>)
 800056e:	f7ff ffd7 	bl	8000520 <LL_SPI_DMA_GetRegAddr>
 8000572:	4604      	mov	r4, r0
 8000574:	2104      	movs	r1, #4
 8000576:	4813      	ldr	r0, [pc, #76]	; (80005c4 <dma_init+0x6c>)
 8000578:	f7ff fed8 	bl	800032c <LL_DMA_GetDataTransferDirection>
 800057c:	4603      	mov	r3, r0
 800057e:	9300      	str	r3, [sp, #0]
 8000580:	4623      	mov	r3, r4
 8000582:	462a      	mov	r2, r5
 8000584:	2104      	movs	r1, #4
 8000586:	480f      	ldr	r0, [pc, #60]	; (80005c4 <dma_init+0x6c>)
 8000588:	f7ff ff0c 	bl	80003a4 <LL_DMA_ConfigAddresses>
	LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_4, B_SIZE);
 800058c:	2240      	movs	r2, #64	; 0x40
 800058e:	2104      	movs	r1, #4
 8000590:	480c      	ldr	r0, [pc, #48]	; (80005c4 <dma_init+0x6c>)
 8000592:	f7ff fee3 	bl	800035c <LL_DMA_SetDataLength>
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_4);
 8000596:	2104      	movs	r1, #4
 8000598:	480a      	ldr	r0, [pc, #40]	; (80005c4 <dma_init+0x6c>)
 800059a:	f7ff ff79 	bl	8000490 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA1, LL_DMA_STREAM_4);
 800059e:	2104      	movs	r1, #4
 80005a0:	4808      	ldr	r0, [pc, #32]	; (80005c4 <dma_init+0x6c>)
 80005a2:	f7ff ff55 	bl	8000450 <LL_DMA_EnableIT_TE>
	LL_SPI_EnableDMAReq_TX(SPI2);
 80005a6:	4809      	ldr	r0, [pc, #36]	; (80005cc <dma_init+0x74>)
 80005a8:	f7ff ffaa 	bl	8000500 <LL_SPI_EnableDMAReq_TX>

	//LL_SPI_Enable(SPI2);
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10);
 80005ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005b0:	4807      	ldr	r0, [pc, #28]	; (80005d0 <dma_init+0x78>)
 80005b2:	f7ff ffc1 	bl	8000538 <LL_GPIO_ResetOutputPin>
	LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_4);	//wysli dane z buffora
 80005b6:	2104      	movs	r1, #4
 80005b8:	4802      	ldr	r0, [pc, #8]	; (80005c4 <dma_init+0x6c>)
 80005ba:	f7ff fe97 	bl	80002ec <LL_DMA_EnableStream>
	//to w zasadzie poeinno juz dzialac i 1 raz wyslac po resecie uC
}
 80005be:	bf00      	nop
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bdb0      	pop	{r4, r5, r7, pc}
 80005c4:	40026000 	.word	0x40026000
 80005c8:	20000000 	.word	0x20000000
 80005cc:	40003800 	.word	0x40003800
 80005d0:	40020000 	.word	0x40020000

080005d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80005d8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80005dc:	f7ff ff78 	bl	80004d0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80005e0:	f7ff fdfa 	bl	80001d8 <__NVIC_GetPriorityGrouping>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff fe4a 	bl	8000284 <NVIC_EncodePriority>
 80005f0:	4603      	mov	r3, r0
 80005f2:	4619      	mov	r1, r3
 80005f4:	200f      	movs	r0, #15
 80005f6:	f7ff fe1b 	bl	8000230 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80005fa:	200f      	movs	r0, #15
 80005fc:	f7ff fdfa 	bl	80001f4 <__NVIC_EnableIRQ>

}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}

08000604 <LL_AHB1_GRP1_EnableClock>:
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800060e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000610:	4907      	ldr	r1, [pc, #28]	; (8000630 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4313      	orrs	r3, r2
 8000616:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000618:	4b05      	ldr	r3, [pc, #20]	; (8000630 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800061a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4013      	ands	r3, r2
 8000620:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000622:	68fb      	ldr	r3, [r7, #12]
}
 8000624:	bf00      	nop
 8000626:	3714      	adds	r7, #20
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	40023800 	.word	0x40023800

08000634 <LL_GPIO_SetOutputPin>:
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	683a      	ldr	r2, [r7, #0]
 8000642:	619a      	str	r2, [r3, #24]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	463b      	mov	r3, r7
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
 8000664:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000666:	2080      	movs	r0, #128	; 0x80
 8000668:	f7ff ffcc 	bl	8000604 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800066c:	2002      	movs	r0, #2
 800066e:	f7ff ffc9 	bl	8000604 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000672:	2001      	movs	r0, #1
 8000674:	f7ff ffc6 	bl	8000604 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(SPI2CS_GPIO_Port, SPI2CS_Pin);
 8000678:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800067c:	480b      	ldr	r0, [pc, #44]	; (80006ac <MX_GPIO_Init+0x5c>)
 800067e:	f7ff ffd9 	bl	8000634 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = SPI2CS_Pin;
 8000682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000686:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000688:	2301      	movs	r3, #1
 800068a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000694:	2300      	movs	r3, #0
 8000696:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SPI2CS_GPIO_Port, &GPIO_InitStruct);
 8000698:	463b      	mov	r3, r7
 800069a:	4619      	mov	r1, r3
 800069c:	4803      	ldr	r0, [pc, #12]	; (80006ac <MX_GPIO_Init+0x5c>)
 800069e:	f000 fef3 	bl	8001488 <LL_GPIO_Init>

}
 80006a2:	bf00      	nop
 80006a4:	3718      	adds	r7, #24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40020000 	.word	0x40020000

080006b0 <__NVIC_SetPriorityGrouping>:
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <__NVIC_SetPriorityGrouping+0x44>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006cc:	4013      	ands	r3, r2
 80006ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006e2:	4a04      	ldr	r2, [pc, #16]	; (80006f4 <__NVIC_SetPriorityGrouping+0x44>)
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	60d3      	str	r3, [r2, #12]
}
 80006e8:	bf00      	nop
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <LL_RCC_HSE_Enable+0x1c>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a04      	ldr	r2, [pc, #16]	; (8000714 <LL_RCC_HSE_Enable+0x1c>)
 8000702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000706:	6013      	str	r3, [r2, #0]
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800

08000718 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <LL_RCC_HSE_IsReady+0x24>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000724:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000728:	bf0c      	ite	eq
 800072a:	2301      	moveq	r3, #1
 800072c:	2300      	movne	r3, #0
 800072e:	b2db      	uxtb	r3, r3
}
 8000730:	4618      	mov	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800

08000740 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <LL_RCC_SetSysClkSource+0x24>)
 800074a:	689b      	ldr	r3, [r3, #8]
 800074c:	f023 0203 	bic.w	r2, r3, #3
 8000750:	4904      	ldr	r1, [pc, #16]	; (8000764 <LL_RCC_SetSysClkSource+0x24>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4313      	orrs	r3, r2
 8000756:	608b      	str	r3, [r1, #8]
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	40023800 	.word	0x40023800

08000768 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800076c:	4b04      	ldr	r3, [pc, #16]	; (8000780 <LL_RCC_GetSysClkSource+0x18>)
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	f003 030c 	and.w	r3, r3, #12
}
 8000774:	4618      	mov	r0, r3
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800

08000784 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <LL_RCC_SetAHBPrescaler+0x24>)
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000794:	4904      	ldr	r1, [pc, #16]	; (80007a8 <LL_RCC_SetAHBPrescaler+0x24>)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4313      	orrs	r3, r2
 800079a:	608b      	str	r3, [r1, #8]
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	40023800 	.word	0x40023800

080007ac <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80007bc:	4904      	ldr	r1, [pc, #16]	; (80007d0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4313      	orrs	r3, r2
 80007c2:	608b      	str	r3, [r1, #8]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	40023800 	.word	0x40023800

080007d4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80007de:	689b      	ldr	r3, [r3, #8]
 80007e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80007e4:	4904      	ldr	r1, [pc, #16]	; (80007f8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	608b      	str	r3, [r1, #8]
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	40023800 	.word	0x40023800

080007fc <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <LL_RCC_SetTIMPrescaler+0x28>)
 8000806:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800080a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800080e:	4905      	ldr	r1, [pc, #20]	; (8000824 <LL_RCC_SetTIMPrescaler+0x28>)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4313      	orrs	r3, r2
 8000814:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	40023800 	.word	0x40023800

08000828 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <LL_RCC_PLL_Enable+0x1c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a04      	ldr	r2, [pc, #16]	; (8000844 <LL_RCC_PLL_Enable+0x1c>)
 8000832:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000836:	6013      	str	r3, [r2, #0]
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800

08000848 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <LL_RCC_PLL_IsReady+0x24>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000854:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000858:	bf0c      	ite	eq
 800085a:	2301      	moveq	r3, #1
 800085c:	2300      	movne	r3, #0
 800085e:	b2db      	uxtb	r3, r3
}
 8000860:	4618      	mov	r0, r3
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800

08000870 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
 800087c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800087e:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000880:	685a      	ldr	r2, [r3, #4]
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000884:	4013      	ands	r3, r2
 8000886:	68f9      	ldr	r1, [r7, #12]
 8000888:	68ba      	ldr	r2, [r7, #8]
 800088a:	4311      	orrs	r1, r2
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	0192      	lsls	r2, r2, #6
 8000890:	430a      	orrs	r2, r1
 8000892:	4908      	ldr	r1, [pc, #32]	; (80008b4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000894:	4313      	orrs	r3, r2
 8000896:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80008a0:	4904      	ldr	r1, [pc, #16]	; (80008b4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	40023800 	.word	0x40023800
 80008b8:	ffbf8000 	.word	0xffbf8000

080008bc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008c8:	4907      	ldr	r1, [pc, #28]	; (80008e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4013      	ands	r3, r2
 80008d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008da:	68fb      	ldr	r3, [r7, #12]
}
 80008dc:	bf00      	nop
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	40023800 	.word	0x40023800

080008ec <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008f8:	4907      	ldr	r1, [pc, #28]	; (8000918 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000902:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4013      	ands	r3, r2
 8000908:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800090a:	68fb      	ldr	r3, [r7, #12]
}
 800090c:	bf00      	nop
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	40023800 	.word	0x40023800

0800091c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <LL_FLASH_SetLatency+0x24>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f023 0207 	bic.w	r2, r3, #7
 800092c:	4904      	ldr	r1, [pc, #16]	; (8000940 <LL_FLASH_SetLatency+0x24>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4313      	orrs	r3, r2
 8000932:	600b      	str	r3, [r1, #0]
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	40023c00 	.word	0x40023c00

08000944 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000948:	4b04      	ldr	r3, [pc, #16]	; (800095c <LL_FLASH_GetLatency+0x18>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f003 0307 	and.w	r3, r3, #7
}
 8000950:	4618      	mov	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40023c00 	.word	0x40023c00

08000960 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000970:	4904      	ldr	r1, [pc, #16]	; (8000984 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4313      	orrs	r3, r2
 8000976:	600b      	str	r3, [r1, #0]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	40007000 	.word	0x40007000

08000988 <LL_SPI_Enable>:
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	601a      	str	r2, [r3, #0]
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <LL_SPI_IsActiveFlag_TXE>:
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	f003 0302 	and.w	r3, r3, #2
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d101      	bne.n	80009c0 <LL_SPI_IsActiveFlag_TXE+0x18>
 80009bc:	2301      	movs	r3, #1
 80009be:	e000      	b.n	80009c2 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
	...

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80009d4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80009d8:	f7ff ff88 	bl	80008ec <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80009dc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80009e0:	f7ff ff6c 	bl	80008bc <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e4:	2003      	movs	r0, #3
 80009e6:	f7ff fe63 	bl	80006b0 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ea:	f000 f819 	bl	8000a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ee:	f7ff fe2f 	bl	8000650 <MX_GPIO_Init>
  MX_DMA_Init();
 80009f2:	f7ff fdef 	bl	80005d4 <MX_DMA_Init>
  MX_SPI2_Init();
 80009f6:	f000 fa67 	bl	8000ec8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  LL_SPI_Enable(SPI2);
 80009fa:	4808      	ldr	r0, [pc, #32]	; (8000a1c <main+0x4c>)
 80009fc:	f7ff ffc4 	bl	8000988 <LL_SPI_Enable>
  dma_init();
 8000a00:	f7ff fdaa 	bl	8000558 <dma_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 if(LL_SPI_IsActiveFlag_TXE(SPI2)) dma_init();
 8000a04:	4805      	ldr	r0, [pc, #20]	; (8000a1c <main+0x4c>)
 8000a06:	f7ff ffcf 	bl	80009a8 <LL_SPI_IsActiveFlag_TXE>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <main+0x44>
 8000a10:	f7ff fda2 	bl	8000558 <dma_init>
	 LL_mDelay(10);
 8000a14:	200a      	movs	r0, #10
 8000a16:	f000 fe47 	bl	80016a8 <LL_mDelay>
	 if(LL_SPI_IsActiveFlag_TXE(SPI2)) dma_init();
 8000a1a:	e7f3      	b.n	8000a04 <main+0x34>
 8000a1c:	40003800 	.word	0x40003800

08000a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8000a24:	2003      	movs	r0, #3
 8000a26:	f7ff ff79 	bl	800091c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 8000a2a:	bf00      	nop
 8000a2c:	f7ff ff8a 	bl	8000944 <LL_FLASH_GetLatency>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b03      	cmp	r3, #3
 8000a34:	d1fa      	bne.n	8000a2c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000a36:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8000a3a:	f7ff ff91 	bl	8000960 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8000a3e:	f7ff fe5b 	bl	80006f8 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000a42:	bf00      	nop
 8000a44:	f7ff fe68 	bl	8000718 <LL_RCC_HSE_IsReady>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d1fa      	bne.n	8000a44 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_12, 96, LL_RCC_PLLP_DIV_2);
 8000a4e:	2300      	movs	r3, #0
 8000a50:	2260      	movs	r2, #96	; 0x60
 8000a52:	210c      	movs	r1, #12
 8000a54:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000a58:	f7ff ff0a 	bl	8000870 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000a5c:	f7ff fee4 	bl	8000828 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000a60:	bf00      	nop
 8000a62:	f7ff fef1 	bl	8000848 <LL_RCC_PLL_IsReady>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d1fa      	bne.n	8000a62 <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f7ff fe89 	bl	8000784 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000a72:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a76:	f7ff fe99 	bl	80007ac <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f7ff feaa 	bl	80007d4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000a80:	2002      	movs	r0, #2
 8000a82:	f7ff fe5d 	bl	8000740 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000a86:	bf00      	nop
 8000a88:	f7ff fe6e 	bl	8000768 <LL_RCC_GetSysClkSource>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b08      	cmp	r3, #8
 8000a90:	d1fa      	bne.n	8000a88 <SystemClock_Config+0x68>
  {

  }
  LL_Init1msTick(100000000);
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <SystemClock_Config+0x88>)
 8000a94:	f000 fdfa 	bl	800168c <LL_Init1msTick>
  LL_SetSystemCoreClock(100000000);
 8000a98:	4803      	ldr	r0, [pc, #12]	; (8000aa8 <SystemClock_Config+0x88>)
 8000a9a:	f000 fe2b 	bl	80016f4 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff feac 	bl	80007fc <LL_RCC_SetTIMPrescaler>
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	05f5e100 	.word	0x05f5e100

08000aac <__NVIC_GetPriorityGrouping>:
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	0a1b      	lsrs	r3, r3, #8
 8000ab6:	f003 0307 	and.w	r3, r3, #7
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_EnableIRQ>:
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	db0b      	blt.n	8000af2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	f003 021f 	and.w	r2, r3, #31
 8000ae0:	4907      	ldr	r1, [pc, #28]	; (8000b00 <__NVIC_EnableIRQ+0x38>)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	095b      	lsrs	r3, r3, #5
 8000ae8:	2001      	movs	r0, #1
 8000aea:	fa00 f202 	lsl.w	r2, r0, r2
 8000aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000e100 	.word	0xe000e100

08000b04 <__NVIC_SetPriority>:
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	6039      	str	r1, [r7, #0]
 8000b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	db0a      	blt.n	8000b2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	490c      	ldr	r1, [pc, #48]	; (8000b50 <__NVIC_SetPriority+0x4c>)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	0112      	lsls	r2, r2, #4
 8000b24:	b2d2      	uxtb	r2, r2
 8000b26:	440b      	add	r3, r1
 8000b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b2c:	e00a      	b.n	8000b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4908      	ldr	r1, [pc, #32]	; (8000b54 <__NVIC_SetPriority+0x50>)
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	f003 030f 	and.w	r3, r3, #15
 8000b3a:	3b04      	subs	r3, #4
 8000b3c:	0112      	lsls	r2, r2, #4
 8000b3e:	b2d2      	uxtb	r2, r2
 8000b40:	440b      	add	r3, r1
 8000b42:	761a      	strb	r2, [r3, #24]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000e100 	.word	0xe000e100
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <NVIC_EncodePriority>:
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b089      	sub	sp, #36	; 0x24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	f1c3 0307 	rsb	r3, r3, #7
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	bf28      	it	cs
 8000b76:	2304      	movcs	r3, #4
 8000b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	2b06      	cmp	r3, #6
 8000b80:	d902      	bls.n	8000b88 <NVIC_EncodePriority+0x30>
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3b03      	subs	r3, #3
 8000b86:	e000      	b.n	8000b8a <NVIC_EncodePriority+0x32>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43da      	mvns	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8000baa:	43d9      	mvns	r1, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	4313      	orrs	r3, r2
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3724      	adds	r7, #36	; 0x24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
	...

08000bc0 <LL_DMA_SetDataTransferDirection>:
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <LL_DMA_SetDataTransferDirection+0x44>)
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	4413      	add	r3, r2
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8000be0:	4908      	ldr	r1, [pc, #32]	; (8000c04 <LL_DMA_SetDataTransferDirection+0x44>)
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	440b      	add	r3, r1
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	4619      	mov	r1, r3
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	440b      	add	r3, r1
 8000bee:	4619      	mov	r1, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	600b      	str	r3, [r1, #0]
}
 8000bf6:	bf00      	nop
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	0800178c 	.word	0x0800178c

08000c08 <LL_DMA_SetMode>:
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8000c14:	4a0d      	ldr	r2, [pc, #52]	; (8000c4c <LL_DMA_SetMode+0x44>)
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	4413      	add	r3, r2
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	4413      	add	r3, r2
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8000c28:	4908      	ldr	r1, [pc, #32]	; (8000c4c <LL_DMA_SetMode+0x44>)
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	440b      	add	r3, r1
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4619      	mov	r1, r3
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	440b      	add	r3, r1
 8000c36:	4619      	mov	r1, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	600b      	str	r3, [r1, #0]
}
 8000c3e:	bf00      	nop
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	0800178c 	.word	0x0800178c

08000c50 <LL_DMA_SetPeriphIncMode>:
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	; (8000c94 <LL_DMA_SetPeriphIncMode+0x44>)
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	4413      	add	r3, r2
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	4413      	add	r3, r2
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000c70:	4908      	ldr	r1, [pc, #32]	; (8000c94 <LL_DMA_SetPeriphIncMode+0x44>)
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	440b      	add	r3, r1
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	440b      	add	r3, r1
 8000c7e:	4619      	mov	r1, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	600b      	str	r3, [r1, #0]
}
 8000c86:	bf00      	nop
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	0800178c 	.word	0x0800178c

08000c98 <LL_DMA_SetMemoryIncMode>:
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	; (8000cdc <LL_DMA_SetMemoryIncMode+0x44>)
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	4413      	add	r3, r2
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000cb8:	4908      	ldr	r1, [pc, #32]	; (8000cdc <LL_DMA_SetMemoryIncMode+0x44>)
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	440b      	add	r3, r1
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	440b      	add	r3, r1
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	600b      	str	r3, [r1, #0]
}
 8000cce:	bf00      	nop
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	0800178c 	.word	0x0800178c

08000ce0 <LL_DMA_SetPeriphSize>:
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8000cec:	4a0d      	ldr	r2, [pc, #52]	; (8000d24 <LL_DMA_SetPeriphSize+0x44>)
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8000d00:	4908      	ldr	r1, [pc, #32]	; (8000d24 <LL_DMA_SetPeriphSize+0x44>)
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	440b      	add	r3, r1
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	440b      	add	r3, r1
 8000d0e:	4619      	mov	r1, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	600b      	str	r3, [r1, #0]
}
 8000d16:	bf00      	nop
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	0800178c 	.word	0x0800178c

08000d28 <LL_DMA_SetMemorySize>:
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8000d34:	4a0d      	ldr	r2, [pc, #52]	; (8000d6c <LL_DMA_SetMemorySize+0x44>)
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	4413      	add	r3, r2
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	4413      	add	r3, r2
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8000d48:	4908      	ldr	r1, [pc, #32]	; (8000d6c <LL_DMA_SetMemorySize+0x44>)
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	440b      	add	r3, r1
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	440b      	add	r3, r1
 8000d56:	4619      	mov	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	600b      	str	r3, [r1, #0]
}
 8000d5e:	bf00      	nop
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	0800178c 	.word	0x0800178c

08000d70 <LL_DMA_SetStreamPriorityLevel>:
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	4413      	add	r3, r2
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	4413      	add	r3, r2
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000d90:	4908      	ldr	r1, [pc, #32]	; (8000db4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	440b      	add	r3, r1
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	440b      	add	r3, r1
 8000d9e:	4619      	mov	r1, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	600b      	str	r3, [r1, #0]
}
 8000da6:	bf00      	nop
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	0800178c 	.word	0x0800178c

08000db8 <LL_DMA_SetChannelSelection>:
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	; (8000dfc <LL_DMA_SetChannelSelection+0x44>)
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	4413      	add	r3, r2
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8000dd8:	4908      	ldr	r1, [pc, #32]	; (8000dfc <LL_DMA_SetChannelSelection+0x44>)
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	440b      	add	r3, r1
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	440b      	add	r3, r1
 8000de6:	4619      	mov	r1, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	600b      	str	r3, [r1, #0]
}
 8000dee:	bf00      	nop
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	0800178c 	.word	0x0800178c

08000e00 <LL_DMA_DisableFifoMode>:
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8000e0a:	4a0c      	ldr	r2, [pc, #48]	; (8000e3c <LL_DMA_DisableFifoMode+0x3c>)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	4413      	add	r3, r2
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4413      	add	r3, r2
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	4908      	ldr	r1, [pc, #32]	; (8000e3c <LL_DMA_DisableFifoMode+0x3c>)
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	440a      	add	r2, r1
 8000e20:	7812      	ldrb	r2, [r2, #0]
 8000e22:	4611      	mov	r1, r2
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	440a      	add	r2, r1
 8000e28:	f023 0304 	bic.w	r3, r3, #4
 8000e2c:	6153      	str	r3, [r2, #20]
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	0800178c 	.word	0x0800178c

08000e40 <LL_AHB1_GRP1_EnableClock>:
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e4c:	4907      	ldr	r1, [pc, #28]	; (8000e6c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	40023800 	.word	0x40023800

08000e70 <LL_APB1_GRP1_EnableClock>:
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e7c:	4907      	ldr	r1, [pc, #28]	; (8000e9c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
}
 8000e90:	bf00      	nop
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	40023800 	.word	0x40023800

08000ea0 <LL_SPI_SetStandard>:
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f023 0210 	bic.w	r2, r3, #16
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	431a      	orrs	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	605a      	str	r2, [r3, #4]
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <MX_SPI2_Init>:
}
/* USER CODE END 0 */

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b090      	sub	sp, #64	; 0x40
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000ece:	f107 0318 	add.w	r3, r7, #24
 8000ed2:	2228      	movs	r2, #40	; 0x28
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 fc40 	bl	800175c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	463b      	mov	r3, r7
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	611a      	str	r2, [r3, #16]
 8000eea:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8000eec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ef0:	f7ff ffbe 	bl	8000e70 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000ef4:	2002      	movs	r0, #2
 8000ef6:	f7ff ffa3 	bl	8000e40 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB10   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8000efa:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8000efe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f00:	2302      	movs	r3, #2
 8000f02:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f04:	2303      	movs	r3, #3
 8000f06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000f10:	2305      	movs	r3, #5
 8000f12:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f14:	463b      	mov	r3, r7
 8000f16:	4619      	mov	r1, r3
 8000f18:	4833      	ldr	r0, [pc, #204]	; (8000fe8 <MX_SPI2_Init+0x120>)
 8000f1a:	f000 fab5 	bl	8001488 <LL_GPIO_Init>

  /* SPI2 DMA Init */

  /* SPI2_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_4, LL_DMA_CHANNEL_0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2104      	movs	r1, #4
 8000f22:	4832      	ldr	r0, [pc, #200]	; (8000fec <MX_SPI2_Init+0x124>)
 8000f24:	f7ff ff48 	bl	8000db8 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8000f28:	2240      	movs	r2, #64	; 0x40
 8000f2a:	2104      	movs	r1, #4
 8000f2c:	482f      	ldr	r0, [pc, #188]	; (8000fec <MX_SPI2_Init+0x124>)
 8000f2e:	f7ff fe47 	bl	8000bc0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_4, LL_DMA_PRIORITY_MEDIUM);
 8000f32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f36:	2104      	movs	r1, #4
 8000f38:	482c      	ldr	r0, [pc, #176]	; (8000fec <MX_SPI2_Init+0x124>)
 8000f3a:	f7ff ff19 	bl	8000d70 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_4, LL_DMA_MODE_NORMAL);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2104      	movs	r1, #4
 8000f42:	482a      	ldr	r0, [pc, #168]	; (8000fec <MX_SPI2_Init+0x124>)
 8000f44:	f7ff fe60 	bl	8000c08 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_4, LL_DMA_PERIPH_NOINCREMENT);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2104      	movs	r1, #4
 8000f4c:	4827      	ldr	r0, [pc, #156]	; (8000fec <MX_SPI2_Init+0x124>)
 8000f4e:	f7ff fe7f 	bl	8000c50 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_4, LL_DMA_MEMORY_INCREMENT);
 8000f52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f56:	2104      	movs	r1, #4
 8000f58:	4824      	ldr	r0, [pc, #144]	; (8000fec <MX_SPI2_Init+0x124>)
 8000f5a:	f7ff fe9d 	bl	8000c98 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_4, LL_DMA_PDATAALIGN_HALFWORD);
 8000f5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f62:	2104      	movs	r1, #4
 8000f64:	4821      	ldr	r0, [pc, #132]	; (8000fec <MX_SPI2_Init+0x124>)
 8000f66:	f7ff febb 	bl	8000ce0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_4, LL_DMA_MDATAALIGN_HALFWORD);
 8000f6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f6e:	2104      	movs	r1, #4
 8000f70:	481e      	ldr	r0, [pc, #120]	; (8000fec <MX_SPI2_Init+0x124>)
 8000f72:	f7ff fed9 	bl	8000d28 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_4);
 8000f76:	2104      	movs	r1, #4
 8000f78:	481c      	ldr	r0, [pc, #112]	; (8000fec <MX_SPI2_Init+0x124>)
 8000f7a:	f7ff ff41 	bl	8000e00 <LL_DMA_DisableFifoMode>

  /* SPI2 interrupt Init */
  NVIC_SetPriority(SPI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000f7e:	f7ff fd95 	bl	8000aac <__NVIC_GetPriorityGrouping>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2200      	movs	r2, #0
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fde5 	bl	8000b58 <NVIC_EncodePriority>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4619      	mov	r1, r3
 8000f92:	2024      	movs	r0, #36	; 0x24
 8000f94:	f7ff fdb6 	bl	8000b04 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI2_IRQn);
 8000f98:	2024      	movs	r0, #36	; 0x24
 8000f9a:	f7ff fd95 	bl	8000ac8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_Init 1 */
//  LL_SPI_EnableIT_TXE(SPI2);
  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000fa2:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000fa6:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_16BIT;
 8000fa8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fac:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000fb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV64;
 8000fbc:	2328      	movs	r3, #40	; 0x28
 8000fbe:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8000fc8:	230a      	movs	r3, #10
 8000fca:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8000fcc:	f107 0318 	add.w	r3, r7, #24
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4807      	ldr	r0, [pc, #28]	; (8000ff0 <MX_SPI2_Init+0x128>)
 8000fd4:	f000 faee 	bl	80015b4 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <MX_SPI2_Init+0x128>)
 8000fdc:	f7ff ff60 	bl	8000ea0 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	3740      	adds	r7, #64	; 0x40
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40020400 	.word	0x40020400
 8000fec:	40026000 	.word	0x40026000
 8000ff0:	40003800 	.word	0x40003800

08000ff4 <LL_DMA_DisableStream>:
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000ffe:	4a0c      	ldr	r2, [pc, #48]	; (8001030 <LL_DMA_DisableStream+0x3c>)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	4413      	add	r3, r2
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4413      	add	r3, r2
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4908      	ldr	r1, [pc, #32]	; (8001030 <LL_DMA_DisableStream+0x3c>)
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	440a      	add	r2, r1
 8001014:	7812      	ldrb	r2, [r2, #0]
 8001016:	4611      	mov	r1, r2
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	440a      	add	r2, r1
 800101c:	f023 0301 	bic.w	r3, r3, #1
 8001020:	6013      	str	r3, [r2, #0]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	08001794 	.word	0x08001794

08001034 <LL_DMA_IsActiveFlag_TC4>:
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF4)==(DMA_HISR_TCIF4));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0320 	and.w	r3, r3, #32
 8001044:	2b20      	cmp	r3, #32
 8001046:	bf0c      	ite	eq
 8001048:	2301      	moveq	r3, #1
 800104a:	2300      	movne	r3, #0
 800104c:	b2db      	uxtb	r3, r3
}
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <LL_DMA_IsActiveFlag_TE4>:
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TEIF4)==(DMA_HISR_TEIF4));
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	2b08      	cmp	r3, #8
 800106c:	bf0c      	ite	eq
 800106e:	2301      	moveq	r3, #1
 8001070:	2300      	movne	r3, #0
 8001072:	b2db      	uxtb	r3, r3
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <LL_DMA_ClearFlag_TC4>:
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF4);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2220      	movs	r2, #32
 800108c:	60da      	str	r2, [r3, #12]
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <LL_DMA_ClearFlag_TE4>:
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF4);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2208      	movs	r2, #8
 80010a6:	60da      	str	r2, [r3, #12]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <LL_SPI_IsActiveFlag_BSY>:
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c4:	2b80      	cmp	r3, #128	; 0x80
 80010c6:	d101      	bne.n	80010cc <LL_SPI_IsActiveFlag_BSY+0x18>
 80010c8:	2301      	movs	r3, #1
 80010ca:	e000      	b.n	80010ce <LL_SPI_IsActiveFlag_BSY+0x1a>
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <LL_SPI_EnableIT_TXE>:
{
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	605a      	str	r2, [r3, #4]
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <LL_SPI_DisableIT_TXE>:
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	605a      	str	r2, [r3, #4]
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <LL_GPIO_SetOutputPin>:
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	683a      	ldr	r2, [r7, #0]
 8001128:	619a      	str	r2, [r3, #24]
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800113a:	e7fe      	b.n	800113a <NMI_Handler+0x4>

0800113c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <HardFault_Handler+0x4>

08001142 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <MemManage_Handler+0x4>

08001148 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114c:	e7fe      	b.n	800114c <BusFault_Handler+0x4>

0800114e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001152:	e7fe      	b.n	8001152 <UsageFault_Handler+0x4>

08001154 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC4(DMA1))
 8001190:	480d      	ldr	r0, [pc, #52]	; (80011c8 <DMA1_Stream4_IRQHandler+0x3c>)
 8001192:	f7ff ff4f 	bl	8001034 <LL_DMA_IsActiveFlag_TC4>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00a      	beq.n	80011b2 <DMA1_Stream4_IRQHandler+0x26>
	{
		LL_DMA_ClearFlag_TC4(DMA1);
 800119c:	480a      	ldr	r0, [pc, #40]	; (80011c8 <DMA1_Stream4_IRQHandler+0x3c>)
 800119e:	f7ff ff6f 	bl	8001080 <LL_DMA_ClearFlag_TC4>
		LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_4);		//disable dma here
 80011a2:	2104      	movs	r1, #4
 80011a4:	4808      	ldr	r0, [pc, #32]	; (80011c8 <DMA1_Stream4_IRQHandler+0x3c>)
 80011a6:	f7ff ff25 	bl	8000ff4 <LL_DMA_DisableStream>
		LL_SPI_EnableIT_TXE(SPI2);
 80011aa:	4808      	ldr	r0, [pc, #32]	; (80011cc <DMA1_Stream4_IRQHandler+0x40>)
 80011ac:	f7ff ff95 	bl	80010da <LL_SPI_EnableIT_TXE>
  /* USER CODE END DMA1_Stream4_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80011b0:	e008      	b.n	80011c4 <DMA1_Stream4_IRQHandler+0x38>
	else if(LL_DMA_IsActiveFlag_TE4(DMA1))
 80011b2:	4805      	ldr	r0, [pc, #20]	; (80011c8 <DMA1_Stream4_IRQHandler+0x3c>)
 80011b4:	f7ff ff51 	bl	800105a <LL_DMA_IsActiveFlag_TE4>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d002      	beq.n	80011c4 <DMA1_Stream4_IRQHandler+0x38>
		LL_DMA_ClearFlag_TE4(DMA1);		//tranfer error shuld be some king of handler here
 80011be:	4802      	ldr	r0, [pc, #8]	; (80011c8 <DMA1_Stream4_IRQHandler+0x3c>)
 80011c0:	f7ff ff6b 	bl	800109a <LL_DMA_ClearFlag_TE4>
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40026000 	.word	0x40026000
 80011cc:	40003800 	.word	0x40003800

080011d0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */
	//if(LL_SPI_IsActiveFlag_TXE(SPI2))
	//{
//	if(LL_SPI_Isactive)
	LL_SPI_DisableIT_TXE(SPI2);
 80011d4:	4808      	ldr	r0, [pc, #32]	; (80011f8 <SPI2_IRQHandler+0x28>)
 80011d6:	f7ff ff90 	bl	80010fa <LL_SPI_DisableIT_TXE>
		while(LL_SPI_IsActiveFlag_BSY(SPI2))	;	//waoit for finishing spi operations
 80011da:	bf00      	nop
 80011dc:	4806      	ldr	r0, [pc, #24]	; (80011f8 <SPI2_IRQHandler+0x28>)
 80011de:	f7ff ff69 	bl	80010b4 <LL_SPI_IsActiveFlag_BSY>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1f9      	bne.n	80011dc <SPI2_IRQHandler+0xc>
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_10);	//cs high end tx tream
 80011e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ec:	4803      	ldr	r0, [pc, #12]	; (80011fc <SPI2_IRQHandler+0x2c>)
 80011ee:	f7ff ff94 	bl	800111a <LL_GPIO_SetOutputPin>

  /* USER CODE END SPI2_IRQn 0 */
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40003800 	.word	0x40003800
 80011fc:	40020000 	.word	0x40020000

08001200 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <SystemInit+0x28>)
 8001206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800120a:	4a07      	ldr	r2, [pc, #28]	; (8001228 <SystemInit+0x28>)
 800120c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <SystemInit+0x28>)
 8001216:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800121a:	609a      	str	r2, [r3, #8]
#endif
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800122c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001264 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001230:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001232:	e003      	b.n	800123c <LoopCopyDataInit>

08001234 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001236:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001238:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800123a:	3104      	adds	r1, #4

0800123c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800123c:	480b      	ldr	r0, [pc, #44]	; (800126c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001240:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001242:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001244:	d3f6      	bcc.n	8001234 <CopyDataInit>
  ldr  r2, =_sbss
 8001246:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001248:	e002      	b.n	8001250 <LoopFillZerobss>

0800124a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800124a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800124c:	f842 3b04 	str.w	r3, [r2], #4

08001250 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001252:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001254:	d3f9      	bcc.n	800124a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001256:	f7ff ffd3 	bl	8001200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800125a:	f000 fa5b 	bl	8001714 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800125e:	f7ff fbb7 	bl	80009d0 <main>
  bx  lr    
 8001262:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001264:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001268:	080017a4 	.word	0x080017a4
  ldr  r0, =_sdata
 800126c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001270:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8001274:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8001278:	200000a0 	.word	0x200000a0

0800127c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800127c:	e7fe      	b.n	800127c <ADC_IRQHandler>

0800127e <LL_GPIO_SetPinMode>:
{
 800127e:	b480      	push	{r7}
 8001280:	b089      	sub	sp, #36	; 0x24
 8001282:	af00      	add	r7, sp, #0
 8001284:	60f8      	str	r0, [r7, #12]
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	fa93 f3a3 	rbit	r3, r3
 8001298:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	fab3 f383 	clz	r3, r3
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	2103      	movs	r1, #3
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	401a      	ands	r2, r3
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	fa93 f3a3 	rbit	r3, r3
 80012b8:	61bb      	str	r3, [r7, #24]
  return result;
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	fab3 f383 	clz	r3, r3
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	431a      	orrs	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	601a      	str	r2, [r3, #0]
}
 80012d0:	bf00      	nop
 80012d2:	3724      	adds	r7, #36	; 0x24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <LL_GPIO_SetPinOutputType>:
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	43db      	mvns	r3, r3
 80012f0:	401a      	ands	r2, r3
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	6879      	ldr	r1, [r7, #4]
 80012f6:	fb01 f303 	mul.w	r3, r1, r3
 80012fa:	431a      	orrs	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	605a      	str	r2, [r3, #4]
}
 8001300:	bf00      	nop
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <LL_GPIO_SetPinSpeed>:
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	; 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa93 f3a3 	rbit	r3, r3
 8001326:	613b      	str	r3, [r7, #16]
  return result;
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	fab3 f383 	clz	r3, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2103      	movs	r1, #3
 8001334:	fa01 f303 	lsl.w	r3, r1, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	401a      	ands	r2, r3
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	fa93 f3a3 	rbit	r3, r3
 8001346:	61bb      	str	r3, [r7, #24]
  return result;
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	fab3 f383 	clz	r3, r3
 800134e:	b2db      	uxtb	r3, r3
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	fa01 f303 	lsl.w	r3, r1, r3
 8001358:	431a      	orrs	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	609a      	str	r2, [r3, #8]
}
 800135e:	bf00      	nop
 8001360:	3724      	adds	r7, #36	; 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <LL_GPIO_SetPinPull>:
{
 800136a:	b480      	push	{r7}
 800136c:	b089      	sub	sp, #36	; 0x24
 800136e:	af00      	add	r7, sp, #0
 8001370:	60f8      	str	r0, [r7, #12]
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	68da      	ldr	r2, [r3, #12]
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	fa93 f3a3 	rbit	r3, r3
 8001384:	613b      	str	r3, [r7, #16]
  return result;
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	fab3 f383 	clz	r3, r3
 800138c:	b2db      	uxtb	r3, r3
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	2103      	movs	r1, #3
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	401a      	ands	r2, r3
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	fa93 f3a3 	rbit	r3, r3
 80013a4:	61bb      	str	r3, [r7, #24]
  return result;
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	fab3 f383 	clz	r3, r3
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	6879      	ldr	r1, [r7, #4]
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	431a      	orrs	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	60da      	str	r2, [r3, #12]
}
 80013bc:	bf00      	nop
 80013be:	3724      	adds	r7, #36	; 0x24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <LL_GPIO_SetAFPin_0_7>:
{
 80013c8:	b480      	push	{r7}
 80013ca:	b089      	sub	sp, #36	; 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6a1a      	ldr	r2, [r3, #32]
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	fa93 f3a3 	rbit	r3, r3
 80013e2:	613b      	str	r3, [r7, #16]
  return result;
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	fab3 f383 	clz	r3, r3
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	210f      	movs	r1, #15
 80013f0:	fa01 f303 	lsl.w	r3, r1, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	401a      	ands	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	fa93 f3a3 	rbit	r3, r3
 8001402:	61bb      	str	r3, [r7, #24]
  return result;
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	fab3 f383 	clz	r3, r3
 800140a:	b2db      	uxtb	r3, r3
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	fa01 f303 	lsl.w	r3, r1, r3
 8001414:	431a      	orrs	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	621a      	str	r2, [r3, #32]
}
 800141a:	bf00      	nop
 800141c:	3724      	adds	r7, #36	; 0x24
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <LL_GPIO_SetAFPin_8_15>:
{
 8001426:	b480      	push	{r7}
 8001428:	b089      	sub	sp, #36	; 0x24
 800142a:	af00      	add	r7, sp, #0
 800142c:	60f8      	str	r0, [r7, #12]
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	0a1b      	lsrs	r3, r3, #8
 800143a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	fa93 f3a3 	rbit	r3, r3
 8001442:	613b      	str	r3, [r7, #16]
  return result;
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	fab3 f383 	clz	r3, r3
 800144a:	b2db      	uxtb	r3, r3
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	210f      	movs	r1, #15
 8001450:	fa01 f303 	lsl.w	r3, r1, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	401a      	ands	r2, r3
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	fa93 f3a3 	rbit	r3, r3
 8001464:	61bb      	str	r3, [r7, #24]
  return result;
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	fab3 f383 	clz	r3, r3
 800146c:	b2db      	uxtb	r3, r3
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	431a      	orrs	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800147c:	bf00      	nop
 800147e:	3724      	adds	r7, #36	; 0x24
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	fa93 f3a3 	rbit	r3, r3
 80014a6:	613b      	str	r3, [r7, #16]
  return result;
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	fab3 f383 	clz	r3, r3
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80014b2:	e050      	b.n	8001556 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	2101      	movs	r1, #1
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	fa01 f303 	lsl.w	r3, r1, r3
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d042      	beq.n	8001550 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d003      	beq.n	80014da <LL_GPIO_Init+0x52>
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d10d      	bne.n	80014f6 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	461a      	mov	r2, r3
 80014e0:	69b9      	ldr	r1, [r7, #24]
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff ff12 	bl	800130c <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	461a      	mov	r2, r3
 80014ee:	69b9      	ldr	r1, [r7, #24]
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff fef3 	bl	80012dc <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	461a      	mov	r2, r3
 80014fc:	69b9      	ldr	r1, [r7, #24]
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ff33 	bl	800136a <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b02      	cmp	r3, #2
 800150a:	d11a      	bne.n	8001542 <LL_GPIO_Init+0xba>
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	fa93 f3a3 	rbit	r3, r3
 8001516:	60bb      	str	r3, [r7, #8]
  return result;
 8001518:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800151a:	fab3 f383 	clz	r3, r3
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b07      	cmp	r3, #7
 8001522:	d807      	bhi.n	8001534 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	461a      	mov	r2, r3
 800152a:	69b9      	ldr	r1, [r7, #24]
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ff4b 	bl	80013c8 <LL_GPIO_SetAFPin_0_7>
 8001532:	e006      	b.n	8001542 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	461a      	mov	r2, r3
 800153a:	69b9      	ldr	r1, [r7, #24]
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ff72 	bl	8001426 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	461a      	mov	r2, r3
 8001548:	69b9      	ldr	r1, [r7, #24]
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff fe97 	bl	800127e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	3301      	adds	r3, #1
 8001554:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	fa22 f303 	lsr.w	r3, r2, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1a7      	bne.n	80014b4 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <LL_SPI_IsEnabled>:
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800157e:	2b40      	cmp	r3, #64	; 0x40
 8001580:	d101      	bne.n	8001586 <LL_SPI_IsEnabled+0x18>
 8001582:	2301      	movs	r3, #1
 8001584:	e000      	b.n	8001588 <LL_SPI_IsEnabled+0x1a>
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <LL_SPI_SetCRCPolynomial>:
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	461a      	mov	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	611a      	str	r2, [r3, #16]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ffd3 	bl	800156e <LL_SPI_IsEnabled>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d139      	bne.n	8001642 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80015d6:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	6811      	ldr	r1, [r2, #0]
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	6852      	ldr	r2, [r2, #4]
 80015e2:	4311      	orrs	r1, r2
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	6892      	ldr	r2, [r2, #8]
 80015e8:	4311      	orrs	r1, r2
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	68d2      	ldr	r2, [r2, #12]
 80015ee:	4311      	orrs	r1, r2
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	6912      	ldr	r2, [r2, #16]
 80015f4:	4311      	orrs	r1, r2
 80015f6:	683a      	ldr	r2, [r7, #0]
 80015f8:	6952      	ldr	r2, [r2, #20]
 80015fa:	4311      	orrs	r1, r2
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	6992      	ldr	r2, [r2, #24]
 8001600:	4311      	orrs	r1, r2
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	69d2      	ldr	r2, [r2, #28]
 8001606:	4311      	orrs	r1, r2
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	6a12      	ldr	r2, [r2, #32]
 800160c:	430a      	orrs	r2, r1
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f023 0204 	bic.w	r2, r3, #4
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	0c1b      	lsrs	r3, r3, #16
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001630:	d105      	bne.n	800163e <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	4619      	mov	r1, r3
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff ffab 	bl	8001594 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800163e:	2300      	movs	r3, #0
 8001640:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	61da      	str	r2, [r3, #28]
  return status;
 800164e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	fbb2 f3f3 	udiv	r3, r2, r3
 800166a:	4a07      	ldr	r2, [pc, #28]	; (8001688 <LL_InitTick+0x30>)
 800166c:	3b01      	subs	r3, #1
 800166e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <LL_InitTick+0x30>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001676:	4b04      	ldr	r3, [pc, #16]	; (8001688 <LL_InitTick+0x30>)
 8001678:	2205      	movs	r2, #5
 800167a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	e000e010 	.word	0xe000e010

0800168c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001694:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ffdd 	bl	8001658 <LL_InitTick>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <LL_mDelay+0x48>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80016b6:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016be:	d00c      	beq.n	80016da <LL_mDelay+0x32>
  {
    Delay++;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3301      	adds	r3, #1
 80016c4:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80016c6:	e008      	b.n	80016da <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <LL_mDelay+0x48>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d002      	beq.n	80016da <LL_mDelay+0x32>
    {
      Delay--;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	607b      	str	r3, [r7, #4]
  while (Delay)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1f3      	bne.n	80016c8 <LL_mDelay+0x20>
    }
  }
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000e010 	.word	0xe000e010

080016f4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80016fc:	4a04      	ldr	r2, [pc, #16]	; (8001710 <LL_SetSystemCoreClock+0x1c>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6013      	str	r3, [r2, #0]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20000080 	.word	0x20000080

08001714 <__libc_init_array>:
 8001714:	b570      	push	{r4, r5, r6, lr}
 8001716:	4d0d      	ldr	r5, [pc, #52]	; (800174c <__libc_init_array+0x38>)
 8001718:	4c0d      	ldr	r4, [pc, #52]	; (8001750 <__libc_init_array+0x3c>)
 800171a:	1b64      	subs	r4, r4, r5
 800171c:	10a4      	asrs	r4, r4, #2
 800171e:	2600      	movs	r6, #0
 8001720:	42a6      	cmp	r6, r4
 8001722:	d109      	bne.n	8001738 <__libc_init_array+0x24>
 8001724:	4d0b      	ldr	r5, [pc, #44]	; (8001754 <__libc_init_array+0x40>)
 8001726:	4c0c      	ldr	r4, [pc, #48]	; (8001758 <__libc_init_array+0x44>)
 8001728:	f000 f820 	bl	800176c <_init>
 800172c:	1b64      	subs	r4, r4, r5
 800172e:	10a4      	asrs	r4, r4, #2
 8001730:	2600      	movs	r6, #0
 8001732:	42a6      	cmp	r6, r4
 8001734:	d105      	bne.n	8001742 <__libc_init_array+0x2e>
 8001736:	bd70      	pop	{r4, r5, r6, pc}
 8001738:	f855 3b04 	ldr.w	r3, [r5], #4
 800173c:	4798      	blx	r3
 800173e:	3601      	adds	r6, #1
 8001740:	e7ee      	b.n	8001720 <__libc_init_array+0xc>
 8001742:	f855 3b04 	ldr.w	r3, [r5], #4
 8001746:	4798      	blx	r3
 8001748:	3601      	adds	r6, #1
 800174a:	e7f2      	b.n	8001732 <__libc_init_array+0x1e>
 800174c:	0800179c 	.word	0x0800179c
 8001750:	0800179c 	.word	0x0800179c
 8001754:	0800179c 	.word	0x0800179c
 8001758:	080017a0 	.word	0x080017a0

0800175c <memset>:
 800175c:	4402      	add	r2, r0
 800175e:	4603      	mov	r3, r0
 8001760:	4293      	cmp	r3, r2
 8001762:	d100      	bne.n	8001766 <memset+0xa>
 8001764:	4770      	bx	lr
 8001766:	f803 1b01 	strb.w	r1, [r3], #1
 800176a:	e7f9      	b.n	8001760 <memset+0x4>

0800176c <_init>:
 800176c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800176e:	bf00      	nop
 8001770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001772:	bc08      	pop	{r3}
 8001774:	469e      	mov	lr, r3
 8001776:	4770      	bx	lr

08001778 <_fini>:
 8001778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800177a:	bf00      	nop
 800177c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800177e:	bc08      	pop	{r3}
 8001780:	469e      	mov	lr, r3
 8001782:	4770      	bx	lr
